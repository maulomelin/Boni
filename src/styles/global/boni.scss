/* BONI THEME CSS (\src\styles\global\boni.scss) -------------------------------
//  - This file defines the visual styles of all elements in the Boni theme:
//      - Base elements (e.g. <p>, <button>, figures/images, etc.).
//          - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/
//          - https://www.w3schools.com/html/
//      - Abstract constructs (i.e. drawer, navbar, accordion, tooltip, etc.).
//      - Utilities (e.g. debugging, show/hide, grid).
//  - Guiding Principles:
//      - Leverage existing html elements (e.g. <button>).
//          - Avoid recasting elements to mimic a UX (e.g. <a class="button">).
//      - Define new classes only under these two scenarios:
//          1) When defining abstract constructs (e.g. [class="header-bar"]).
//          2) When augmenting existing elements (e.g. [class="color-blue"]).
//      - Be semantic.
//          - Structure content with semantically-appropriate tags whenever
//            possible.
//          - Worry about the meaning of the content, not its presentation.
//      - Be kind to users.
//          - Use relative/scalable units (e.g. "em", "rem").  Rules to follow:
//              0) Do not use pixels.
//              1) Use "em" if property should scale according to its font-size.
//              2) Size everything else in "rem".
//      - Be kind to developers.
//          - Use c-style comments (allows code to be copy/pasted outside).
//          - Limit width of comment blocks to 80 chars.
//------------------------------------------------------------------------------
// Notes:
//  - If some of these styles do not render as expected, look at the CSS style
//    hierarchy to find the definition with higher order of precedence.
//  - Use @mixin where necessary for cross-browser compatibility.
//------------------------------------------------------------------------------
// TODOs:
//  - Create basic static CSS framework for use in stand-alone projects:
//      - grid.css
//      - media-queries.css
//  - Update comment delimiters to use / * and * / (without space) so we can
//    copy/paste CSS into stand-alone files that aren't pre-processed.
//  - Use mixin prefix where typography (fonts) are defined.
//  - Figure out how to use Autoprefixer and remove @include prefix() calls.
//  - Select a style of commenting within a file that uses block comment at the
//    top (to close off block comments from outside this file), and line
//    comments within.
//  - Review the breakpoints to determine if we want small or medium on
//    iPhones in landscape mode, by default.  See landscape resolutions on:
//    https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions
//  - Update "section-header" to "section-title".
//  - Add normalize.css to our templates.
//  - How do we handle different colors for buttons?  We could create specific
//    "button-primary" and "button-secondary" classes, or we could define
//    "color-primary" and "color-secondary" classes and use those appropriately.
//  - Decide if buttons will have "upper-case" labels, standard.
//  - Implement definitions for these sections (and more or less):
//      - Debugging, Grid, Base Styles, Buttons, Typography, Lists, Forms, Code,
//        links, Tables, Spacing, Ultilities, Media Queries, Utilities, etc.
//  - Update <pre> definition.
//  - See if/where we can use the var() and calc() CSS functions to set global
//    variables used throughout our stylesheets.  See https://minicss.org/ CSS.
//      - set variables:  :root { --name: value; }
//      - reference variables:  var(--name)
//      - perform a calculation:  calc(100% - 100px) OR calc(2*var(--name))
//  - Adjust the abstract construct templates to fit whatever JS frameworks
//    we decide to leverage.
//  - Figure out how we define & style color names (e.g. "red") vs.
//    color variants (e.g. "primary").
//----------------------------------------------------------------------------*/


/* Hacks -----------------------------------------------------------------------
//  - REMOVE BEFORE PUSHING CODE TO PRODUCTION.
//----------------------------------------------------------------------------*/
.shopify-preview-bar { display:none; }
#preview-bar-iframe { display: none; }


/* Debugging -------------------------------------------------------------------
//  - Define classes for a collapsible container we can use for debug info.
//----------------------------------------------------------------------------*/
._debug-flexrowwrap { display: flex; flex-flow: row wrap; align-items: center; }
._debug-flexrownowrap { display: flex; flex-flow: row nowrap; align-items: center; }

._debug, ._debug-info, ._debug-new-code, ._debug-original-code { display: none; padding: 1rem; margin: 1rem; xwidth: 200px; overflow: scroll; }
._debug::before, ._debug-info::before, ._debug-new-code::before, ._debug-original-code::before { display: table; position: relative; font-weight: bold; color: white; top: -1rem; left: -1rem; padding: 0 0.5rem 0.25rem 0; border-bottom-right-radius: 0.5rem; }
._debug { border: solid 5px red; }
._debug::before { content: "DEBUG"; background: red; }
._debug-info { border: solid 5px red; }
._debug-info::before { content: "DEBUG - INFO"; background: red; }
._debug-new-code { border: solid 5px orange; }
._debug-new-code::before { content: "DEBUG - NEW CODE"; background: orange; }
._debug-original-code { border: solid 5px green; }
._debug-original-code::before { content: "DEBUG - ORIGINAL CODE"; background: green; }


/* Grid ------------------------------------------------------------------------
//  - css/_grid.css
//  - For now, leverage the grid defined by Shopify's Slate theme.
//  - Includes grid framework and element visibility, text alignment,
//    column widths, and push column widths for defined breakpoints.
//----------------------------------------------------------------------------*/
._hide { display: none !important; }
._show { display: block !important; }


/* Fonts -----------------------------------------------------------------------
//  - css/_fonts.css
//------------------------------------------------------------------------------
// TODOs:
//  - Figure out if we need margins around any of the header classes.
//  - Figure out the right "line-height" setting.
//  - Implement responsive typography (desktop 16px?  mobile 14px?).
//      https://getbootstrap.com/docs/4.1/content/typography/#responsive-typography
//      https://www.readz.com/best-font-size
//  - Remove dependency on font-size in <html> from variables.scss.liquid.
//  - Review choice for font
//      https://opinionator.blogs.nytimes.com/2012/08/08/hear-all-ye-people-hearken-o-earth/
//  - Play around with fonts
//      https://medium.muz.li/typography-in-mobile-design-15-best-practices-to-excellent-ui-5eaf18280ad
//  - Track why SCSS does not allow use of non-Liquid CSS variables.
//      - https://github.com/Shopify/slate/issues/524
//      - Fix made on Slate v1.0
//----------------------------------------------------------------------------*/
:root {
/*  --p: calc(16/14); /* Waiting on https://github.com/Shopify/slate/issues/524 */
}
html { font-size: 87.5%; }
body { font-size: 1rem; font-weight: 400; line-height: 1.3; font-family: $font-stack-body; }

h1, h2, h3, h4, h5, h6, ._h1, ._h2, ._h3, ._h4, ._h5, ._h6 { font-weight: 400; line-height: 1.3; font-family: $font-stack-header; margin: 0; }

h1, ._h1, ._text-xxxlarge { font-size: calc(1rem * 24/14); }
          ._text-xxlarge  { font-size: calc(1rem * 21/14); }
h2, ._h2, ._text-xlarge   { font-size: calc(1rem * 18/14); }
          ._text-large    { font-size: calc(1rem * 16/14); }
h3, ._h3, ._text-normal   { font-size: calc(1rem); }
h4, ._h4, ._text-small    { font-size: calc(1rem * 12/14); }
h5, ._h5, ._text-xsmall   { font-size: calc(1rem * 10/14); }
h6, ._h6, ._text-xxsmall  { font-size: calc(1rem * 8/14); }

/*
  Replace this section with the one below once we upgrade to Slate v1.0.
  Also uncomment the CSS variable declaration in the :root pseudo-element.
  https://github.com/Shopify/slate/issues/524
  TODO:
    - Do we change "_text" to "_font"?
*/
._text-xxxlarger { font-size: calc(1em * calc(16/14) * calc(16/14) * calc(16/14) * calc(16/14)); }
._text-xxlarger  { font-size: calc(1em * calc(16/14) * calc(16/14) * calc(16/14)); }
._text-xlarger   { font-size: calc(1em * calc(16/14) * calc(16/14)); }
._text-larger    { font-size: calc(1em * calc(16/14)); }
._text-smaller   { font-size: calc(1em / calc(16/14)); }
._text-xsmaller  { font-size: calc(1em / calc(16/14) / calc(16/14)); }
._text-xxsmaller { font-size: calc(1em / calc(16/14) / calc(16/14) / calc(16/14)); }
/*
._text-xxxlarger { font-size: calc(1em * var(--p) * var(--p) * var(--p) * var(--p)); }
._text-xxlarger  { font-size: calc(1em * var(--p) * var(--p) * var(--p)); }
._text-xlarger   { font-size: calc(1em * var(--p) * var(--p)); }
._text-larger    { font-size: calc(1em * var(--p)); }
._text-smaller   { font-size: calc(1em / var(--p)); }
._text-xsmaller  { font-size: calc(1em / var(--p) / var(--p)); }
._text-xxsmaller { font-size: calc(1em / var(--p) / var(--p) / var(--p)); }
*/
._text-red { color: red; }
._text-green { color: green; }
._text-blue { color: blue; }
._text-orange { color: orange; }
._text-gray { color: gray; }
._text-black { color: black; }
._text-white { color: white; }
._text-yellow { color: yellow; }


/* Paragraphs & Text Formatting ------------------------------------------------
//
//------------------------------------------------------------------------------
// TODOs:
//  - Consider redefining <hr> with opacity to get a thinner line; see cart.
//----------------------------------------------------------------------------*/
._nowrap { white-space: nowrap; }
p { margin: 0 0 1rem 0; }

pre { font: Consolas, monaco, monospace; color: #666; overflow: auto; padding: 1em; border: solid 1px black; background: #ccc; }
hr { width: 95%; border-width: 1px 0 0 0; } //  border-top: 0.1rem solid black; margin: 3rem 0;

q { display: inline; }
q::before { content: open-quote; }
q::after { content: close-quote; }
blockquote { display: block; border-left: 1rem solid #ccc; margin: 0 1rem; padding: 0 1rem; }
abbr { text-decoration: underline wavy red; }
address { display: block; font-style: italic; }

b { font-weight: 500; }
strong { font-weight: 500; }
i { font-style: italic; }
em { font-weight: 500; }
mark { background-color: yellow; }
del { text-decoration: line-through; }
ins { text-decoration: underline; color: red; }
u { text-decoration: underline; }
sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }
sup { top: -0.5em; }
sub { bottom: -0.25em; }
s { text-decoration: line-through; }


/* Anchors/Links ---------------------------------------------------------------
//  - Use anchors as navigational elements only.
//  - Don't configure anchors to look like buttons; they're spec'd for different
//    things and activate with different keys (i.e. Enter key vs. Space key).
//----------------------------------------------------------------------------*/
a:link { color: #197bbd; text-decoration: none; }
a:hover { color: #15669d; text-decoration: underline; }
a:visited { color: #197bbd; }
a:active { }


/* Buttons ---------------------------------------------------------------------
//  - Follow the convention that buttons can only be made with these elements:
//      - <input type="submit">
//      - <input type="button">
//      - <button>
//  - Use buttons to submit or reset forms, or to execute custom behaviour only.
//  - Do not use buttons for navigation.  That's what links are for.
//------------------------------------------------------------------------------
// TODOs:
//  - Redo them.
//----------------------------------------------------------------------------*/
input[type="submit"] > span,
input[type="button"] > span,
button > span {
  xmargin: 0 0.2em;
  xoutline: solid 1px pink;
}

input[type="submit"],
input[type="button"],
button {
/*
  @include prefix("user-select", "none", moz ms webkit spec); // ???
  @include prefix("appearance", "none", webkit moz spec); // ???
*/

  xxxdisplay: inline-flex; /* Flexbox to center content vertically & horizontally. */
  xxxalign-items: center; /* This aligns flex items on the cross axis (i.e. generally vertically). */
  xxxjustify-content: center; /* This aligns flex items on the main axis (i.e. generally horizontally). */

  xxxtext-decoration: none;
  xxxtext-align: middle;
  xxxwhite-space: nowrap;
  xpadding: 0.4rem 0.4rem;
  xmargin: auto; /* Screws up right margin on buttons. */
  xxxcursor: pointer;
  xborder-radius: 4px;

  xxxtext-transform: none;

/* DO WE DEFINE BASE COLOR STYLES HERE AND OVERRIDE VIA MODIFIERS? */
  color: orange;
  border:solid 1px red; /* yellow; */
  background-color: lightyellow;

/* MAKE THESE PROPERTIES OF THE ELEMENTS PLACED INSIDE A BUTTON */
  xfont-family: Arial, sans-serif;
  xfont-size: 2em; /* 1.4rem; */
  xfont-weight: 400;
  xline-height: 2rem; /* 4rem; /* DO WE NEED THIS? */
/*-----*/
}

input[type="submit"]:hover,
input[type="submit"]:focus,
input[type="button"]:hover,
input[type="button"]:focus,
button:hover,
button:focus {
//  xxxopacity: 0.75;
}

input[type="submit"][disabled],
button[disabled] {
  xxxcursor: not-allowed;
}


/* ICONS -----------------------------------------------------------------------
//  - General styles for icons.
//  - All icons are implemented as <svg>s.
//  - The icon is aligned with the baseline of its parent.
//------------------------------------------------------------------------------
// TODOs:
//  -
//----------------------------------------------------------------------------*/
._icon {
  display: inline-block;
  width: 1.4rem;
  height: 1.4rem;
}
.no-svg ._icon { display: none; }


/* Colors ----------------------------------------------------------------------
//                    v  v  v  v  v  v
//  (black) #000000 - 0123456789abcdef - #ffffff (white)
//                    ^  ^  ^  ^  ^  ^
//------------------------------------------------------------------------------
// TODO:
//  - How do we define colors?  We could create specific classes:
//        e.g. "button-primary", "button-secondary"
//    or we could define abstract classes:
//        e.g. "color-primary", "color-secondary"
//  - What properties does a "color" modify?  background, color, border, etc.?
//  - Abstract structure/position from presentation/visual styles of an object.
//  - Decide what to do with older names...
//----------------------------------------------------------------------------*/
._color-white { background-color: #ffffff; }
._color-pearl { background-color: #f2edd8; }
._color-melon { background-color: #f5926c; }
._color-light-olive { background-color: #bea968; }
._color-hummus { background-color: #bea968; }
._color-cinnamon { background-color: #a67247; }
._color-shedron { background-color: #8f413d; color: white; }
._color-chedron { background-color: #8f413d; color: white; }
._color-kiwi { background-color: #bead3b; }
._color-aqua { background-color: #7ed9c3; }
._color-black { background-color: #28282d; color: white; }
._color-gray { background-color: #595e62; color: white; }
._color-indigo-blue { background-color: #254e62; color: white; }
._color-indigo { background-color: #254e62; color: white; }
._color-turquoise-blue { background-color: #0082b5; color: white; }
._color-turquoise { background-color: #0082b5; color: white; }
._color-lilac { background-color: #a17eb6; }
._color-rosewood { background-color: #c0889d; }
._color-coral { background-color: #d85863; }



/* Shapes ----------------------------------------------------------------------
//  - A circle applies a border-radius of 50% to the target element.
//    http://jessica-eldredge.com/2014/09/07/border-radius-50-or-100-percent/
//  - A cross is implemented via a CSS linear-gradient on the pseudo-class
//    "::before" (i.e. ".x::before { ... }").
//      - The class is given a "position: absolute", which gives it its own
//        stacking context and avoids issues with overlaying gradients.
//      - This requires the target element be given a "position: relative",
//        which keeps the cross neatly placed on top of the target element.
//      - The cross is given "height: 100%" and "width: 100%", which sizes it
//        the same as the target element.
//      - The cross size is adjusted on a circle to fit across the corners of
//        the bounding box of that circle.
//      - The cross lines are dark with a white edge to allow it to blend on
//        dark- and light-colored backgrounds.
//      - The cross is drawn on the "::before" pseudo-class because in Safari,
//        ".x::after { position: absolute; }" does not work.
//        This would seem to be a bug.  https://stackoverflow.com/questions/30526801/absolute-after-pseudo-element-not-displaying-under-relative-parent/
//----------------------------------------------------------------------------*/
._shape-circle { border-radius: 50%; }


/* Tables ----------------------------------------------------------------------
//  -
//----------------------------------------------------------------------------*/
table,
thead, tbody, tfoot,
th, tr, td {
  border-collapse: collapse;
  xborder: dashed 1px pink;
  xpadding: 2px;
}
thead {
  background: darkgray;
  color: white;
}


/* Menu ------------------------------------------------------------------------
//  - A menu is a nested list of links.
//------------------------------------------------------------------------------
// TODO:
//  - Clean <ul> to remove any default margins or paddings.
//----------------------------------------------------------------------------*/
.x_menu {
  display: block;
  margin: 0;
  padding-left: 0.5rem;
}
._menu-item {
  display: list-item;
  xborder-bottom: solid 1px lightgray;
  list-style: none;
  padding: .5em;
}
._menu-item:hover {
  background: lightgray;
}


/* Fieldset --------------------------------------------------------------------
//  - See normalize.scss for adjusted settings.
//----------------------------------------------------------------------------*/
fieldset {
//  padding: 0.25rem 0.25rem;
//  border: 0;
}
fieldset legend {
//  display: none;
}


/* Options Field ---------------------------------------------------------------
//  - An options field is a visual grouping of options a user can selectd from.
//  - The field is implemented as a fieldset with a label and containing a
//    set of {<input>, <label>} pairs representing an option.
//      - The <input> elements maintain option state.
//      - The <label> elements render the label, shape, and other properties
//        of a given option.
//  - Each option can support the following states:
//      - :checked - option is selected.
//      - :focus - option has the current focus of the keyboard.
//      - :active - interaction with option has commenced (space, click-down).
//      - [un]available - option is [un]available given the current selections.
//  - To hide the <input> controls while still keeping the grouping tabbable:
//      - First, take them out of the layout (via "position: absolute;") to
//        keep them from taking up space but still remain tabbable.
//      - Next, move them offscreen with "left: -999%".
//      - Do not use "display: none;"; that will remove them entirely, both
//        from the layout and hidden to screen readers.
//      - Do not shrink them to 0 dimensions (via "height: 0; width: 0;"); that
//        may leave a small dot in some browsers.
//      - See https://stackoverflow.com/questions/4425282/how-can-i-stop-the-browser-viewport-moving-to-the-top-of-the-page-when-the-user/
//  - Since the <input> tag does not take children, we implement all visual
//    styling on the <label> element, and use the sibling "+" selector to
//    target any desired <label> element for ":checked", ":focus", etc.
//  - To turn any square into a circle, just add the "._shape-circle" class
//    to the "._switch" element.
//  - Do not use ":disabled" on the options; we want to allow users to select
//    options that are unavailable, with a message that they will take longer
//    to fulfill.
//  - "._options" is a flexbox, so we can align and wrap all option elements.
//  - "._option-label" is a flexbox, so we can center all label content.
//------------------------------------------------------------------------------
// Resources:
//  - See the design pattern doc/spec/prototype.
//  - Radio buttons as toggle buttons:
//    https://thestizmedia.com/radio-buttons-as-toggle-buttons-with-css/
//------------------------------------------------------------------------------
// TODOs:
//  - Update the focus of the radio button to have the same color as the default
//    focus of any other element on the page.  When the user moves off the
//    fieldset, then the checked style kicks in, which may be something else.
//  - See https://uxplanet.org/button-ux-design-best-practices-types-and-states-647cf4ae0fc6
//  - Figure out color combinations so that an unavailable selection clearly
//    identifies an option as such, but doesn't call too much attention.
//----------------------------------------------------------------------------*/
._options-field { margin: 0; padding: 0; border: 0; }
._field-label { padding: 0; margin: 0; border: 0; font-weight: bold; }
._options { display: flex; flex-flow: row wrap; align-items: center; }
._options input[type="radio"] { position: absolute; left: -999%; }
._option {
  display: flex; flex-flow: row nowrap; align-items: center; justify-content: center;
  width: 4rem; height: 4rem;
  margin: 0.25rem;
}
._option-label {
  position: relative;
  display: flex; flex-flow: row nowrap; align-items: center; justify-content: center;
  height: 75%;
  width: 75%;
  border: solid 1px gray;
}
._x._option-label,
._xx._option-label {
  border: solid 1px transparent;
}
._x::before,
._xx::before {
  content: "";
  position: absolute;
  height: 130%;
  width: 130%;
  border: solid 1px gray;
}
._x::before {
  background:
    linear-gradient(to top left, transparent 0%, transparent calc(50% - 1px), white calc(50% - 1px), gray calc(50% + 1px), transparent calc(50% + 1px), transparent 100%);
}
._xx::before {
  background:
    linear-gradient(to top left, transparent 0%, transparent calc(50% - 1px), white calc(50% - 1px), gray calc(50% + 1px), transparent calc(50% + 1px), transparent 100%),
    linear-gradient(to top right, transparent 0%, transparent calc(50% - 1px), white calc(50% - 1px), gray calc(50% + 1px), transparent calc(50% + 1px), transparent 100%);
}
._shape-circle._x::before,
._shape-circle._xx::before {
  xheight: 141.421356%;
  xwidth: 141.421356%;
  border-radius: 50%;
}
._options input[type="radio"]:checked + ._option {
  outline: solid 0.25rem yellow;
}
._options input[type="radio"]:focus + ._option {
  xbox-shadow: 0 0 1px 1px blue;
}


/* Switch Field ----------------------------------------------------------------
//  - A switch field is a graphical element that allows the user to choose only
//    one option from a set of mutually exclusive options.
//  - A user can tab through every option before selecting it.
//  - Each field supports the following states:
//      - default - content is shown and clearly delineated from surroundings.
//      - checked - option is selected.
//      - focus - option has the current focus of the keyboard.
//      - active - interaction with option has commenced (space, click-down).
//  - All fields must be the same width; as wide as the longest option.
//  - To hide the checkbox controls while still keeping them tabbable:
//      - First, take them out of the layout (via "position: absolute;") to
//        keep them from taking up space but still remain tabbable.
//      - Last, shrink them to 0 dimensions (via "height: 0; width: 0;").
//      - Do not use "display: none;"; that will remove them entirely, both
//        from the layout and hidden to screen readers.
//  - Since the <input> tag does not take children, we use a sibiling and the
//    "+" or "~" selectors to target that sibling to implement an outline for
//    checked, hover, etc.
//  - To turn any square into a circle, just add ._shape-circle to the same
//    element with ._switch.
//------------------------------------------------------------------------------
// Resources:
//  - Radio buttons as toggle buttons:
//    https://thestizmedia.com/radio-buttons-as-toggle-buttons-with-css/
//------------------------------------------------------------------------------
// TODOs:
//  - "switch-field" --> "swatch"?
//  - Update the focus of the radio button to have the same color as the default
//    focus of any other element on the page.  When the user moves off the
//    fieldset, then the checked style kicks in, which may be something else.
//  - Tweak box-shadow properties to make the selection pop out more obviously.
//  - Add "for" and "id" properties to <label> and <input> tags, respectively.
//    We want and need these to ensure a click on a <label> element triggers
//    its corresponding <input> element.
//  - Consider refactoring code so that a switch is just a pair of adjoining
//    <label> and <input> tags, instead of <input> nested under <label>.
//    This may end up making the code cleaner, tidier, and better for screen
//    readers.  We still need to add "for" and "id" properties to each.
//  - Figure out design for :disabled state on an option.  Perhaps raise buttons
//    that are available.  https://uxplanet.org/button-ux-design-best-practices-types-and-states-647cf4ae0fc6
//  - Hide radio buttons by moving them offscreen left, instead of sizing to 0.
//      - Update the design note above, and add this URL as reference:
//        https://stackoverflow.com/questions/4425282/how-can-i-stop-the-browser-viewport-moving-to-the-top-of-the-page-when-the-user/
//----------------------------------------------------------------------------*/
fieldset._switch-field {
  padding: 0;/* 0.25rem 0.25rem; */
  border: 0;
  xborder: solid 1px purple;
}
._switch-field input[type="radio"] {
  position: absolute;
  left: -999%;
}
._switches {
  display: flex;
  flex-flow: row wrap;
  align-items: center;
}
._switch {
  border: solid 1px #ccc;
  margin: 0.5rem; /* Distance between switches. */
  padding: 0;
}
._switch-label {
  display: flex; // Flexbox to center content vertically & horizontally.
  align-items: center; // This aligns flex items vertically.
  justify-content: center; // This aligns flex items horizontally.
  width: 2.5rem; // Width of the switch.
  height: 2.5rem; // Height of the switch.
///*dbg*/border: solid 1px yellow;
}
._shape-circle,
._shape-circle ._switch-label {
  border-radius: 50%;
}
._switch-field input[type="radio"]:checked + ._switch-label {
  box-shadow: 0 0 4px 4px yellow;
}
._switch-field input[type="radio"]:disabled + ._switch-label {
   background:linear-gradient(to bottom right, white, white 48%, black 50%, white 52%, white);
}
._switch-field input[type="radio"]:focus + ._switch-label {
  box-shadow: 0 0 4px 4px blue;
}


/* Tooltips --------------------------------------------------------------------
//  - Implement it by allowing users to simply add a _tooltip="text" attribute
//    to any element.  The implementation leverages the ::before and ::after
//    pseudo-elements to define the tooltip arrow and tooltip text bubble,
//    respectively.
//  - Hide the tooltip by default.  We use opacity for this.
//  - Show the tooltip on a hover.
//------------------------------------------------------------------------------
// TODOs:
//  - Change "_tooltip" --> "_tooltip-text" ?  Matches "_tooltip-position".
//  - Migrate tooltip attributes to HTML5-valid ones.  Namely, attributes that
//    start with "data-" (e.g. "data-_tooltip-text", "data-_tooltip-position").\
//  - Add tooltip to main menu (see https://productforums.google.com/forum/#!topic/websearch/El-_aS8HRnA).
//  - Move tooltip position to top of mouse pointer, if any, so the cursor does
//    not obstruct the text.
//----------------------------------------------------------------------------*/

// Set up ancestor for any defined tooltips to be positioned with.
[_tooltip] { position: relative; }

// Draw the tooltip arrow from the geometry of a very wide box border.
[_tooltip]::before {
  position: absolute;
  border: solid 0.5rem transparent;
  content: "";
  opacity: 0;
}
// Position the arrow with respect to the tooltipped element.
[_tooltip]:not([_tooltip-position])::before { border-bottom-color: black; bottom: -1rem; left: 50%; transform: translatex(-50%); }
[_tooltip-position="top"]::before { border-top-color: black; top: -0.5rem; left: 50%; transform: translatex(-50%); }
[_tooltip-position="right"]::before { border-right-color: black; right: -0.5rem; top: 50%; transform: translatey(-50%); }
[_tooltip-position="bottom"]::before { border-bottom-color: black; bottom: -0.5rem; left: 50%; transform: translatex(-50%); }
[_tooltip-position="left"]::before { border-left-color: black; left: -0.5rem; top: 50%; transform: translatey(-50%); }

// Draw the tooltip text bubble.
[_tooltip]::after {
  position: absolute;
  border: solid 1px black;
  border-radius: 0.5rem;
  background: rgba(0,0,0,0.75);
  content: attr(_tooltip);
  text-align: center;
  padding: 0.25rem 1rem;
  color: white;
  pointer-events: none;
  opacity: 0;
}
// Position the bubble with respect to the tooltipped element, arrow-aligned.
[_tooltip]:not([_tooltip-position])::after { bottom: -1rem; left: 50%; transform: translate(-50%, 100%); }
[_tooltip-position="top"]::after { top: -0.5rem; left: 50%; transform: translate(-50%, -100%); }
[_tooltip-position="right"]::after { right: -0.5rem; top: 50%; transform: translate(100%, -50%); }
[_tooltip-position="bottom"]::after { bottom: -0.5rem; left: 50%; transform: translate(-50%, 100%); }
[_tooltip-position="left"]::after { left: -0.5rem; top: 50%; transform: translate(-100%, -50%); }

// Set conditions for showing a tooltip.
[_tooltip]:hover::before { opacity: 1; z-index: 99; }
[_tooltip]:hover::after { opacity: 1; z-index: 99; }


/* FORMS -----------------------------------------------------------------------
//  - General styles for all forms.
//------------------------------------------------------------------------------
// TODOs:
//----------------------------------------------------------------------------*/
form {
//  border: solid 1px green;
}

/* IMAGE GALLERY ---------------------------------------------------------------
//  - General styles for an image gallery.
//  - The image gallery will be implemented as a responsive grid, much like
//    many mobile apps (Instagram, Google Images, Pixel500, etc).
//  - The images in the image gallery will be linked to a zoom plug-in with
//    gestures for pinch & swipe.  This plug-in will be initialized at run-time
//    via javascript by parsing the gallery structure.  It will also be tied
//    to the individual selectors to filter the images according to color.
//      - To support these run-time filters, all images in the gallery will
//        have a number of data-* attributes:
//          [data-title=title]
//          [data-color=color]
//          [data-width=width]
//          [data-height=height]
//      - To target images in the gallery of a given color use this selector:
//          [data-color][data-color=chedron] { }
//      - To target all images, except those of a given color:
//          [data-color]:not([data-color=chedron]) { }
//  - Fetching images:  https://www.shopify.com/partners/blog/img-url-filter/
//  - The "position: relative;" statement in the ._gallery ensures the gallery
//    does not create, in iOS/Safari, a white space that makes the page much
//    wider than intended.
//    https://stackoverflow.com/questions/14270084/overflow-xhidden-doesnt-prevent-content-from-overflowing-in-mobile-browsers/
//  - To enable momentum scrolling of the gallery in Safari, set
//    "-webkit-overflow-scrolling: touch;"
//    https://css-tricks.com/snippets/css/momentum-scrolling-on-ios-overflow-elements/
//------------------------------------------------------------------------------
// TODOs:
//  - Figure out an elegant way of terminating the gallery so the last image
//    does not wrap and blow up by itself.
//  - Can we turn the module into a section or snippet?
//  - Consider inline media queries within each image in the gallery, to show
//    larger thumbnails in desktop than mobile.
//  - Translate the images when you swipe/flick; make a swipeable slider.
//  - Test momentum scrolling on other mobile devices to support as appropriate.
//----------------------------------------------------------------------------*/

/* VERSION: Horizontal Filmstrip **********************************************/
._gallery {
  display: flex; flex-flow: row nowrap; // Render the gallery as a flexbox.
  position: relative; // MAKES IT WORK...DESCRIBE WHY!
  overflow-x: auto; // unique to horizontal scroll
}
._gallery {
  -webkit-overflow-scrolling: touch; // Enable momentum scrolling in Safari.
  -ms-overflow-style: none;  // Remove scrollbar in IE 10+
  overflow: -moz-scrollbars-none;  // Remove scrollbar in Firefox
//  border: dashed 1px red; // dbg
}
._gallery::-webkit-scrollbar {
  display: none;  // Remove scrollbar in Safari and Chrome
}
._gallery ._thumbnail {
  margin: 5px;
  padding: 0;
  height: 150px; // unique to horizontal scroll
//  border: dashed 1px pink; // dbg
}
._gallery ._thumbnail._2x {
  height: 450px;
}

._gallery ._thumbnail img {
  height: 100%;
  max-width: none; // overrides a setting somewhere else *sigh*
}
/* VERSION: Responsive Grid ***************************************************
._gallery {
  display: flex;
  flex-flow: row wrap;
//  outline: dashed 1px #ddd;
  width: 100%;
}
._gallery ._thumbnail {
  margin: 0;
  padding: 0.5rem;
//  background-color: #eee;
}
._gallery ._thumbnail img {
  width: 100%;
  height: 100%;
}
/******************************************************************************/


/* ACCORDION -------------------------------------------------------------------
//  - General styles for an accordion.
//  - The accordion layout expects content in the following structure/format:
//        <div class="_accordion">
//          <input class="_state" type="checkbox" ... />
//          <label class="_label" ...>...</label>
//          <div class="_panel">...</div>
//          ...
//        </div>
//
//  - See the design pattern prototypes for details on any target schema.
//  - The accordion design pattern is a CSS-only solution; no JS needed to work.
//  - Radio buttons are hidden by moving them offscreen left (vs. sizing to 0).
//    This keeps them in the flow, tabbable, and avoids a "jump" when changed.
//    https://stackoverflow.com/questions/4425282/how-can-i-stop-the-browser-viewport-moving-to-the-top-of-the-page-when-the-user/
//  - The implementation assumes checkboxes, which allows items to be opened or
//    closed, independent of each other.
//      - If it was a radio button, then only one could be active at a time.
//        This would allow the accordion and checkbox widgets to be based
//        off the same template.
//------------------------------------------------------------------------------
// TODOs:
//  - At some point figure out how to remove the "max-height" hack.
//  - Figure out if we need a transition from :checked state back to default.
//----------------------------------------------------------------------------*/
._accordion { /*  padding: 10px; */ }
._accordion ._state { position: absolute; left: -999%; }
._accordion ._label { display: flex; justify-content: flex-start; padding: .7em 0em; cursor: pointer; border-top: solid 1px #eee; }
._accordion ._label::before { content: "\23F7"; transition: all .25s; } /* "+"; /* "\25BC" = ▼ /* "\23F7" = ⏷ */
._accordion ._panel { max-height: 0; overflow: auto; transition: max-height 0.25s; }
._accordion input[type="checkbox"]:checked + ._label + ._panel { max-height: 99rem; /* hack */ }
._accordion input[type="checkbox"]:checked + ._label::before {   content: "\23F6"; } /* transform: rotate(315deg); /* content: "---"; /* "\25B2" = ▲ /* "\23F6" = ⏶ */


/* TABS ------------------------------------------------------------------------
//  - General styles for tabs.
//  - The tabs layout expects content in the following structure/format:
//        <div class="_tabs">
//          <input class="_state" type="radio" ... />
//          <label class="_label" ...>...</label>
//          <div class="_panel">...</div>
//          ...
//        </div>
//
//  - The tabs design pattern is a CSS-only solution; no JS needed to work.
//  - Radio buttons are hidden by moving them offscreen left (vs. sizing to 0).
//    This keeps them in the flow, tabbable, and avoids a "jump" when changed.
//    https://stackoverflow.com/questions/4425282/how-can-i-stop-the-browser-viewport-moving-to-the-top-of-the-page-when-the-user/
//  - The implementation assumes radio buttons, which only allows a single tab
//    to be shown at any given time.
//----------------------------------------------------------------------------*/
._tabs { display: flex; flex-wrap: wrap; }
._tabs ._state { position: absolute; left: -999%; }
._tabs ._label { order: 0; padding: .7em 1em; cursor: pointer; }
._tabs ._panel { order: 1; width: 100%; display: none; }
._tabs input[type="radio"]:checked + ._label + ._panel { display: block; }
._tabs input[type="radio"]:checked + ._label { border-bottom: solid 4px orange; }


/* NUMERIC SPINNER -------------------------------------------------------------
//  - css/_spinner.css
//----------------------------------------------------------------------------*/
._spinner { display: flex; flex-flow: row nowrap; align-items: center; }
._spinner ._label { line-height: 1.25rem; min-width: 2rem; padding-right: 0.5rem; text-align: left; }
._spinner ._button { height: 2rem; width: 2.5rem; border: solid 1px #ccc; border-radius: 0; background: #fff; color: #000; }
._spinner ._button:first-of-type { margin-right: -1px; border-radius: 4px 0 0 4px; }
._spinner ._button:last-of-type { border-radius: 0 4px 4px 0; }
._spinner ._button:disabled { color: #ccc; }


/* THUMBNAIL -------------------------------------------------------------------
//  - css/_thumbnail.css
//------------------------------------------------------------------------------
// TODOs:
//  - Rework the thumbnail in the ProductDetails page and get rid of the "div".
//----------------------------------------------------------------------------*/
div._thumbnail { display: flex; align-items: center; justify-content: center; border: 1px rgba(0,0,0,0.1) solid; border-radius: 8px; width: 4.6rem; height: 4.6rem; }
div._thumbnail ._image { max-width: 100%; max-height: 100%; }


/* SHOPPING CART ---------------------------------------------------------------
//
//----------------------------------------------------------------------------*/

/* PADDING */
#_DBG-cart {
  padding: 0 1rem;
  max-width: 60rem;
  margin: 0 auto;
}

._cart-buybox { margin: 1rem 0; }

input[type="submit"]._checkout-button { border: solid 1px transparent; border-radius: 5px; background: #197bbd; color: white; padding: 1.5rem 1.5rem; margin: 1rem 0; }
@media only screen and (max-width: 749px) {
  ._bp-checkout-button { width: 100%; }
}

/* Cart Structure & Layout */
._cart * { xborder: dashed 1px pink; } /* dbg */
._cart > div { xbackground-color: rgba(233, 171, 88, .5); } /* dbg */

._cart { xmin-width: 27rem; }
._cart {
  display: grid;
  grid-template-columns: auto 1fr auto auto auto auto auto;
  grid-template-areas: "i d j p q s a";
  grid-template-rows: auto;
  grid-auto-rows: auto auto minmax(auto, min-content);
  align-items: center;
}

/* Header Row (single set) */
._cart ._h-item { grid-area: i; }
._cart ._h-description { grid-area: d; }
._cart ._h-info { grid-area: j; }
._cart ._h-price { grid-area: p; }
._cart ._h-quantity { grid-area: q; }
._cart ._h-subtotal { grid-area: s; }

/* Items (multiple sets) */
._cart ._line { grid-column: 1 / -1; }
._cart ._image { grid-row: span 2; min-height: 0; }
._cart ._description { grid-row: span 2; min-height: 0; }
._cart ._info { grid-row: span 2; min-height: 0; }
._cart ._price { grid-column: 4; }
._cart ._quantity { grid-column: 5; }
._cart ._subtotal { grid-column: 6; }
._cart ._actions { grid-column: 7; }
._cart ._extras { grid-column: 4 / -2; }

/* Footer Rows (single set) */
._cart ._f-summary { grid-column: 1 / -2; }
._cart ._f-label { grid-column: 1 / 2; }
._cart ._f-value { grid-column: 2 / -2; }

/* Cell Styles */
._cart ._h-item { text-align: center; font-weight: 500; }
._cart ._h-description { padding-left: 1rem; font-weight: 500; }
._cart ._h-info { padding-left: 1rem; font-weight: 500; }
._cart ._h-price { padding-left: 1rem; text-align: center; font-weight: 500; }
._cart ._h-quantity { padding-left: 1rem; text-align: center; font-weight: 500; }
._cart ._h-subtotal { padding-left: 1rem; text-align: center; font-weight: 500; }

._cart ._line { padding: 0.75rem 0; margin: 0; background: linear-gradient(to top, transparent 0%, transparent calc(50% - 1px), rgba(0,0,0,0.1), transparent calc(50% + 1px), transparent 100%); }
._cart ._description { padding-left: 1rem; }
._cart ._info { padding-left: 1rem; }
._cart ._price { padding-left: 1rem; }
._cart ._quantity { padding-left: 1rem; }
._cart ._subtotal { padding-left: 1rem; text-align: right; }
._cart ._actions { padding-left: 1rem; text-align: center; }
._cart ._extras { text-align: right; }

._cart ._f-summary {
  display: flex; flex-flow: row nowrap; justify-content: space-between; align-items: center;
  padding: 0.75rem 0 0 0;
}
._cart ._f-summary + ._line { margin-top: 0.5rem; }
._cart ._f-summary:last-of-type { padding: 0; }

._cart ._line + ._f-label { margin-top: 0.375rem; }
._cart ._f-value:first-of-type { margin-top: 0.375rem; }
._cart ._f-label { text-align: left; padding: 0.375rem 0; }
._cart ._f-value { text-align: right; padding: 0.375rem 0; }
._cart ._f-value + ._line { margin: 0.5rem 0 0 0; }

._horizontal-bullets ul { list-style: none; margin: 0; padding: 0; white-space: nowrap; }
._horizontal-bullets li { display: inline-block; }
._horizontal-bullets li:not(:last-child)::after { content: "\2022"; margin: 0 0.5rem; }

/* Module-Specific Breakpoints */
@media only screen and (max-width: 27rem) {
  ._bp-info { display: none !important; }
  ._bp-price { display: none !important; }
  ._bp-actions { display: none !important; }
  ._bp-extras-original-price { display: none !important; }
}
@media only screen and (min-width: 30rem) and (max-width: 38rem) {
  ._bp-info { display: none !important; }
  ._bp-actions { display: none !important; }
  ._bp-extras-price { display: none !important; }
}
@media only screen and (min-width: 38rem) and (max-width: 43rem) {
  ._bp-actions { display: none !important; }
  ._bp-extras-price { display: none !important; }
  ._bp-extras-original-price { display: none !important; }
  ._bp-extras-info { display: none !important; }
}
@media only screen and (min-width: 43rem) {
  ._bp-extras { display: none !important; }
}


/* Footer ----------------------------------------------------------------------
//
//------------------------------------------------------------------------------
// Debug
footer { border: dashed 1px pink; }
footer * { border: dashed 1px pink; }
//----------------------------------------------------------------------------*/

footer { min-width: 320px; border-top: solid 1px #e6e6e6; margin: 1rem 0; }
footer { display: grid; grid-template-columns: auto; grid-template-areas: "i" "n" "s" "l"; justify-content: center; align-items: center; }
footer ._info { grid-area: i; }
footer ._newsletter { grid-area: n; }
footer ._social { grid-area: s; }
footer ._legal { grid-area: l; }

footer ._info { padding: 1rem 1rem 0; white-space: nowrap; text-transform: uppercase; }
footer ._info ul { margin: 0; padding: 0; white-space: nowrap; list-style: none; }
footer ._info ul { display: flex; flex-flow: row nowrap; justify-content: center; }
footer ._info li + li { margin-left: 1rem; }

footer ._legal { padding: 0 1rem; white-space: nowrap; }
footer ._legal ul { margin: 0; padding: 0; white-space: nowrap; list-style: none; }
footer ._legal ul { display: flex; flex-flow: row wrap; justify-content: center; }
footer ._legal li { padding-top: 1rem; margin-right: 1rem; }

footer ._newsletter { padding: 1rem 1rem 0; white-space: nowrap; }
footer ._newsletter { display: flex; flex-flow: row nowrap; justify-content: center; align-items: baseline; }
footer ._newsletter label { margin-right: 0.5rem; }
footer ._newsletter input[type="email"] { font: inherit; padding: 1px 0.25rem; border: solid 1px gray; }
footer ._newsletter input[type="submit"] { font: inherit; margin: -1px; border: solid 1px gray; border-radius: 0 5px 5px 0; background: lightgray; color: black; padding: 1px 0.25rem; } /* #197bbd */

footer ._social { padding: 1rem 1rem 0; white-space: nowrap; align-self: center; }
footer ._social ul { margin: 0; padding: 0; white-space: nowrap; list-style: none; }
footer ._social ul { display: flex; flex-flow: row nowrap; justify-content: center; align-items: center; }
footer ._social li + li { margin-left: 1rem; }
footer ._social li svg { display: block; }

/* Module-Specific Breakpoints */
@media only screen and (max-width: 30rem) {
  footer ._info { display: none !important; }
}
@media only screen and (min-width: 30rem) and (max-width: 54rem) {
  xfooter { grid-template-areas: "i i" "n s" "l l"; }
  footer { grid-template-areas: "n s" "i i" "l l"; }
}
@media only screen and (min-width: 54rem) and (max-width: 78rem) {
  footer { grid-template-areas: "i n s" "l l l"; }
}
@media only screen and (min-width: 78rem) {
  footer { grid-template-areas: "i n s l"; }
  footer ._legal ul { flex-wrap: nowrap; }
}


/* Product Grid ---------------------------------------------------------------
//
//------------------------------------------------------------------------------
// DEBUG
._product-grid { border: dashed 1px blue; }
._product-grid ._ga-nav { border: dashed 1px pink; }
._product-grid ._ga-carousel { border: dashed 1px pink; }
._product-grid ._ga-details { border: dashed 1px pink; }
._product-grid ._ga-related { border: dashed 1px pink; }
//----------------------------------------------------------------------------*/
._product-grid {
  display: grid;
  grid-template-columns: 13rem 1fr auto;
  grid-template-rows: auto auto auto;
  grid-template-areas:
    "nav head head"
    "nav carousel details"
    "nav related related";
}
._product-grid ._ga-head { grid-area: head; }
._product-grid ._ga-nav { grid-area: nav; }
._product-grid ._ga-carousel { grid-area: carousel; }
._product-grid ._ga-details { grid-area: details; }
._product-grid ._ga-related { grid-area: related; }

/* Module-Specific Breakpoints */
@media only screen and (max-width: 450px) {
  ._product-grid {
    grid-template-columns: 100%;
    grid-template-areas: "head" "carousel" "details" "related";
  }
  ._ga-nav { display: none !important; }
}
@media only screen and (min-width: 451px) and (max-width: 667px) {
  ._product-grid {
    grid-template-columns: minmax(auto, 100%) auto;
    grid-template-areas: "head head" "carousel details" "related related";
  }
  ._ga-nav { display: none !important; }
}
@media only screen and (min-width: 667px) and (max-width: 699px) {
  ._bp-xxx { display: none !important; }
}
@media only screen and (min-width: 700px) {
  ._bp-xxx { display: none !important; }
}

/* (DELETE) NavContent Grid ----------------------------------------------------
//
//------------------------------------------------------------------------------
// TODOs:
//  - What do we make the smallest allowable width for a collection image?
//    It affects how many columns in wider resolutions, and whether the
//    label and price also fit on the screen.
//----------------------------------------------------------------------------*/
// DEBUG */
._navcontent-grid ._navcontent-grid-nav { border: dashed 1px red; }
._navcontent-grid ._navcontent-grid-content { border: dashed 1px green; }
//----------------------------------------------------------------------------*/
._navcontent-grid { display: flex; flex-flow: row nowrap; justify-content: flex-start; }
._navcontent-grid ._navcontent-grid-nav { width: 13rem; }
._navcontent-grid ._navcontent-grid-content { width: 100%; }

._collection { display: grid; grid-template-columns: repeat(auto-fill, minmax(170px, 1fr)); grid-gap: 1rem; max-width: 900px; }
._collection figure { margin: 0; display: flex; flex-flow: column nowrap; justify-content: flex-start; }
._collection figure img { display: block; max-width: 100%; }
._collection figure figcaption { margin-top: 0.5rem; order: 1; }
._collection figure figcaption ul { list-style: none; margin: 0; padding: 0; display: flex; flex-flow: column nowrap; }
._collection ._title { font-weight: 500; text-align: center; order: 1; padding: 0 0.5rem; }
._collection ._price { color: gray; text-align: center; order: 2; }

/* Module-Specific Breakpoints */
@media only screen and (max-width: 667px) {
/* TODO: Change this to a ._bp-xxx class. */
  ._navcontent-grid ._navcontent-grid-nav { display: none !important; }
}
@media only screen and (min-width: 30rem) and (max-width: 38rem) {
}
@media only screen and (min-width: 38rem) and (max-width: 43rem) {
}
@media only screen and (min-width: 43rem) {
}


/* Carousel --------------------------------------------------------------------
//  - Styles for Dots, Prev Links, and Next Links must be generated at runtime.
//      ._state:nth-of-type(n):checked ~ ._pagination ._dot:nth-of-type(n) { background: black; }
//      ._state:nth-of-type(n):checked ~ ._pagination ._prev:nth-of-type(n-1) { display: block; }
//      ._state:nth-of-type(n):checked ~ ._pagination ._next:nth-of-type(n+1) { display: block; }
//------------------------------------------------------------------------------
// DEBUG
._carousel ._viewer { border: solid 1px orange; }
._carousel ._viewer ._aspectratio ._viewport ._slides ._slide { border: solid 1px yellow; }
//----------------------------------------------------------------------------*/
._carousel { display: flex; flex-flow: column nowrap; }
._carousel ._viewer { }
._carousel ._viewer ._aspectratio { max-width: 60vmin; max-height: 90vmin; margin: 0 auto; }
._carousel ._viewer ._aspectratio ._viewport { width: 100%; padding-bottom: calc(100% * 3/2); position: relative; overflow: auto; scroll-snap-type: x mandatory; scroll-behavior: smooth; }
._carousel ._viewer ._aspectratio ._viewport { -webkit-overflow-scrolling: touch; -ms-overflow-style: none; overflow: -moz-scrollbars-none; }
._carousel ._viewer ._aspectratio ._viewport::-webkit-scrollbar { display: none; }
._carousel ._viewer ._aspectratio ._viewport ._slides { position: absolute; width: 100%; height: 100%; display: flex; flex-flow: row nowrap; }
._carousel ._viewer ._aspectratio ._viewport ._slides ._slide { display: flex; align-items: center; justify-content: center; min-width: 100%; scroll-snap-align: center; }
._carousel ._viewer ._aspectratio ._viewport ._slides ._slide ._image { object-fit: contain; width: 100%; height: 100%; }
._carousel ._controls { position: relative; }
._carousel ._controls ._state { position: absolute; left: -999%; }
._carousel ._controls ._pagination { display: flex; flex-flow: row nowrap; align-items: center; justify-content: center; }
._carousel ._controls ._pagination ._prevs { order: 1; }
._carousel ._controls ._pagination ._nexts { order: 3; }
._carousel ._controls ._pagination ._dots { order: 2; }
._carousel ._controls ._pagination ._dots ._dot { cursor: pointer; color: lightgray; margin: 0.5rem; }
._carousel ._controls ._pagination ._dots ._dot::before { content: "\2022"; }
._carousel ._controls ._pagination ._prevs ._prev { cursor: pointer; margin-right: 0.5rem; display: none; }
._carousel ._controls ._pagination ._prevs ._prev::before { content: "<"; }
._carousel ._controls ._pagination ._nexts ._next { cursor: pointer; margin-left: 0.5rem; display: none; }
._carousel ._controls ._pagination ._nexts ._next::before { content: ">"; }


/* Size Chart ------------------------------------------------------------------
//
//------------------------------------------------------------------------------
// DEBUG
._sizechart { border: dashed 1px red; }
._sizechart ._table { border: dashed 1px pink; }
._sizechart ._diagram { border: dashed 1px orange; }
//----------------------------------------------------------------------------*/
._sizechart { display: flex; flex-flow: column; min-width: max-content; max-width: 500px; }
._sizechart ._table { order: 1; }
._sizechart ._diagram { order: 2; }

._sizechart ._table { display: grid; grid-auto-columns: minmax(max-content, auto); }
._sizechart ._table { border: solid 1px lightgray; grid-gap: 1px; background-color: lightgray; }
._sizechart ._table > * { background-color: white; }
._sizechart ._table ._th { grid-row: 1; }
._sizechart ._table ._td { text-align: center; }
._sizechart ._table ._td._t-highlight { background: lightyellow; }

._sizechart ._diagram { text-align: center; }
._sizechart ._diagram img { max-width: 200px; max-height: 200px; }

._sizechart-button { background: none; border: none; text-decoration: underline; cursor: pointer; }
._sizechart-button:focus { outline: 0; }


/* Related Items ---------------------------------------------------------------
//----------------------------------------------------------------------------*/
._relateditems { display: flex; overflow-x: auto; }
._relateditems { -webkit-overflow-scrolling: touch; -ms-overflow-style: none; overflow: -moz-scrollbars-none; }
._relateditems::-webkit-scrollbar { display: none; }
._relateditems ._items { display: grid; grid-auto-flow: column; grid-auto-columns: 100px; grid-template-rows: auto auto; }
._relateditems ._items ._item { display: contents; }
._relateditems ._items ._item ._label { text-align: center; }
._relateditems ._items ._item ._image img { display: block; width: 100%; height: 100%; object-fit: contain; }
/* Related Items (Debug) -----------------------------------------------------*
._relateditems { border: dashed 1px pink; padding: 5px; }
._relateditems ._items { border: dashed 1px lightgreen; padding: 5px; }
._relateditems ._items ._item > * { border: dashed 1px lightblue; }
//----------------------------------------------------------------------------*/


/* Horizontal Gallery ----------------------------------------------------------
//
//------------------------------------------------------------------------------
// DEBUG */
._hgallery { border: solid 1px red; }
._hgallery > * { border: dashed 1px pink; }
//----------------------------------------------------------------------------*/
._hgallery { display: grid; grid-template-rows: auto auto; grid-auto-flow: column; grid-auto-columns: 100px; overflow: auto; }
._hgallery { -webkit-overflow-scrolling: touch; -ms-overflow-style: none; overflow: -moz-scrollbars-none; }
._hgallery::-webkit-scrollbar { display: none; }
._hgallery ._label { text-align: center; }
._hgallery ._image { display: block; width: 100%; height: 100%; object-fit: contain; }


/* Form Validation -------------------------------------------------------------
//  - https://css-tricks.com/form-validation-ux-html-css/
//  - https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation/
//------------------------------------------------------------------------------
// TODOs:
//  - Elegant UX for :valid and :invalid pseudo-classes.  These are not it:
//      input[type="email"]:valid { outline: 1px solid green; }
//      input[type="email"]:invalid { outline: 1px solid red; }
//----------------------------------------------------------------------------*/


/* _addtocart.css --------------------------------------------------------------
// Copyright (c) 2018 maulomelin@gmail.com.  Released under the MIT license.
//----------------------------------------------------------------------------*/
._addtocart ._info { display: flex; padding: 1rem 0; }
._addtocart ._info ._compare { display: flex; align-items: center; font-size: 1.5rem; color: lightgray; text-decoration: line-through; padding-right: 0.5rem; }
._addtocart ._info ._price { display: flex; align-items: center; font-size: 1.5rem; padding-right: 1rem; }
._addtocart ._info ._price._quiet { color: lightgray; }
._addtocart ._info ._message { display: flex; align-items: center; }
/* Make sure empty price fields do not collapse vertical space. */
._addtocart ._info ._compare:empty { padding: 0; }
._addtocart ._info ._compare:empty:after { content: "\200b"; }
._addtocart ._info ._price:empty { padding: 0; }
._addtocart ._info ._price:empty:after { content: "\200b"; }
/* Lay out add-to-cart button and in-stock alert in the same area. */
._addtocart ._request { display: flex; }
._addtocart ._request ._product { display: flex; width: 100%; }
._addtocart ._request ._product button { font: inherit; padding: 1rem; width: 100%; white-space: nowrap; border: solid 1px orange; background: lightyellow; border-radius: 4px; }
._addtocart ._request ._instockalert { display: flex; width: 100%; }
._addtocart ._request ._instockalert input { font: inherit; padding: 1rem; width: 100%; border: solid 1px orange; border-radius: 4px 0 0 4px; }
._addtocart ._request ._instockalert button { font: inherit; padding: 1rem; width: auto; white-space: nowrap; border: solid 1px orange; background: lightyellow; border-radius: 0 4px 4px 0; margin-left: -1px; }
/* Render the in-stock alert response dialogs (success and failure). */
._addtocart ._response { position: fixed; top: 0; left: 0; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; }
._addtocart ._response > * { margin: 1rem; padding: 1rem; border: solid 1px transparent; border-radius: 0.5rem; text-align: center; width: 250px; }
._addtocart ._response button { padding: 0.5rem 1rem; border-radius: 0.25rem; color: white; }
._addtocart ._response ._success { background: #dff0d8; border-color: #d0e9c6; color: #3c763d; }
._addtocart ._response ._error { background: #f2dede; border-color: #ebcccc; color: #a94442; }
._addtocart ._response ._error ul { text-align: left; margin: 0.5rem; padding: 0.5rem; }
._addtocart ._response ._success button { border: solid 1px green; background: green; }
._addtocart ._response ._error button { border: solid 1px red; background: red; }
/* (Debug) -------------------------------------------------------------------*/
.x_addtocart { border: dashed 1px pink; }
.x_addtocart fieldset { border: dashed 1px blue; }
.x_addtocart legend { color: blue; }
._addtocart fieldset { display: none; }
.x_addtocart ._info { border: dashed 1px yellow; }
.x_addtocart ._info > * { border: dashed 1px orange; }
/*----------------------------------------------------------------------------*/


/* _breadcrumb.css -------------------------------------------------------------
// Copyright (c) 2018 maulomelin@gmail.com.  Released under the MIT license.
//----------------------------------------------------------------------------*/
._breadcrumb ul { display: inline; list-style: none; margin: 0; padding: 0; white-space: nowrap; }
._breadcrumb li { display: inline; }
._breadcrumb li:not(:last-child)::after { content: "\003E"; margin: 0 0.5rem; color: gray; }
/* (Debug) -------------------------------------------------------------------*/
.x_breadcrumb { border: dashed 1px pink; }
/*----------------------------------------------------------------------------*/


/* _infochart.css --------------------------------------------------------------
// Copyright (c) 2018 maulomelin@gmail.com.  Released under the MIT license.
//----------------------------------------------------------------------------*/
/* These style the table and diagram portions of the infochart. */
._infochart { display: flex; flex-flow: column; min-width: max-content; max-width: 500px; }
._infochart ._table { order: 1; }
._infochart ._diagram { order: 2; }
/* These style the <ul>s into a CSS Grid. */
._infochart ._table { display: grid; grid-auto-flow: column; grid-auto-columns: minmax(max-content, auto); }
._infochart ._table ul { display: contents; list-style: none; }
._infochart ._table ul:first-of-type li { grid-column: 1; }
/* These style the grid borders. */
._infochart ._table ul li { border-top: solid 1px lightgray; border-left: solid 1px lightgray; }
._infochart ._table ul:last-of-type li { border-right: solid 1px lightgray; }
._infochart ._table ul li:last-of-type { border-bottom: solid 1px lightgray; }
/* These style the table cells. */
._infochart ._table ul { list-style: none; }
._infochart ._table ul li { padding: 0 0.5rem; }
._infochart ._table ul:first-of-type li:first-of-type { visibility: hidden; } /* "visibility: hidden;" hides the element but retains the space occupied by it. */
._infochart ._table ul:not(:first-of-type) li { text-align: center; }
._infochart ._table ul._t-highlight li { background: black; color: white; }
/* These style the diagram. */
._infochart ._diagram { border: solid 1px lightgray; border-top: none; text-align: center; padding: 1rem; }
._infochart ._diagram img { max-width: 200px; max-height: 200px; }
/* These style infochart buttons. */
._infochart-button { background: none; border: none; text-decoration: underline; cursor: pointer; }
/* (Debug) -------------------------------------------------------------------*/
.x_infochart { border: dashed 1px red; }
.x_infochart ._table { border: dashed 1px pink; }
.x_infochart ._diagram { border: dashed 1px orange; }
/*----------------------------------------------------------------------------*/


/* _menu.css -------------------------------------------------------------------
// Copyright 2018 maulomelin@gmail.com.  Released under the MIT license.
//----------------------------------------------------------------------------*/
._menu { padding: 0.5rem 0; }
._menu ul { margin: 0; padding: 0 1rem; white-space: nowrap; }
._menu li { display: block; line-height: 1.5rem; }
/* (Debug) -------------------------------------------------------------------*/
.x_menu { border: dashed 1px pink; }
/*----------------------------------------------------------------------------*/


/* _optiongroup.css ------------------------------------------------------------
// Copyright 2018 maulomelin@gmail.com.  Released under the MIT license.
//----------------------------------------------------------------------------*/
._optiongroup { margin: 0; padding: 0; border: none; }
/* These style the option group's caption (the name, value, and info areas). */
._optiongroup legend { margin: 0; padding: 0; width: 100%; }
._optiongroup legend ._caption { display: flex; flex-flow: row wrap; justify-content: flex-start; white-space: nowrap; }
._optiongroup legend ._caption ._name::after { content: ":"; }
._optiongroup legend ._caption ._value { padding: 0 1rem 0 0.125rem; }
._optiongroup legend ._caption ._info { }
/* These style the default labels, checked state, and if they're colored. */
._optiongroup ._options { position: relative; display: flex; flex-flow: row wrap; align-items: center; }
._optiongroup ._options ._option { position: absolute; left: -999%; }
._optiongroup ._options ._label { position: relative; display: flex; align-items: center; justify-content: center; }
._optiongroup ._options ._label { border: solid 1px lightgray; padding: 0.5rem 1rem; margin: 0.5rem 1rem 0 0; cursor: pointer; }
._optiongroup ._options ._option:checked + ._label:not(._color) { background: black; color: white; border: solid 1px lightgray; }
._optiongroup ._options ._option:checked + ._label._color { box-shadow: 0 0 0.25rem 0.25rem black; }
._optiongroup ._options ._option:only-of-type + ._label:only-of-type { display: none; }
/* These style the cross-out on default labels. */
._optiongroup ._options ._label._x::before { content: ""; position: absolute; border: solid 1px lightgray; width: 100%; height: 100%; background: linear-gradient(to top left, transparent 0%, transparent calc(50% - 1px), white calc(50% - 1px), lightgray calc(50% + 1px), transparent calc(50% + 1px), transparent 100%); }
._optiongroup ._options ._label._xx::before { content: ""; position: absolute; border: solid 1px lightgray; width: 100%; height: 100%; background: linear-gradient(to top left, transparent 0%, transparent calc(50% - 1px), white calc(50% - 1px), lightgray calc(50% + 1px), transparent calc(50% + 1px), transparent 100%), linear-gradient(to top right, transparent 0%, transparent calc(50% - 1px), white calc(50% - 1px), lightgray calc(50% + 1px), transparent calc(50% + 1px), transparent 100%); }
._optiongroup ._options ._label._xxx::before { content: ""; position: absolute; border: solid 1px lightgray; width: 100%; height: 100%; background: linear-gradient(to top left, transparent 0%, transparent calc(50% - 1px), white calc(50% - 1px), lightgray calc(50% + 1px), transparent calc(50% + 1px), transparent 100%), linear-gradient(to top right, transparent 0%, transparent calc(50% - 1px), white calc(50% - 1px), lightgray calc(50% + 1px), transparent calc(50% + 1px), transparent 100%), linear-gradient(to right, transparent 0%, transparent calc(50% - 1px), white calc(50% - 1px), lightgray calc(50% + 1px), transparent calc(50% + 1px), transparent 100%), linear-gradient(to top, transparent 0%, transparent calc(50% - 1px), white calc(50% - 1px), lightgray calc(50% + 1px), transparent calc(50% + 1px), transparent 100%); }
/* These style the cross-out on circle-shaped labels. */
._optiongroup ._options ._label._shape-circle,
._optiongroup ._options ._label._shape-circle._x::before,
._optiongroup ._options ._label._shape-circle._xx::before,
._optiongroup ._options ._label._shape-circle._xxx::before { border-radius: 50%; }
/* (Debug) -------------------------------------------------------------------*/
.x_optiongroup { border: dashed 1px pink; }
.x_optiongroup legend { border: dashed 1px yellow; }
.x_optiongroup legend ._caption div { border: dashed 1px blue; }
/*----------------------------------------------------------------------------*/


/* _pricing.css ----------------------------------------------------------------
// Copyright (c) 2018 maulomelin@gmail.com.  Released under the MIT license.
//----------------------------------------------------------------------------*/
._pricing { display: flex; padding: 1rem 0; }
._pricing ._price { order: 2; font-size: 1.5rem; }
._pricing ._compare { order: 1; font-size: 1.5rem; padding-right: 0.5rem; text-decoration: line-through; color: gray; }
._pricing ._price._quiet { color: gray; }
._pricing ._compare:empty { padding: 0; }
._pricing ._compare:empty:after { content: "\200b"; }
._pricing ._price:empty:after { content: "\200b"; }
/* (Debug) -------------------------------------------------------------------*/
.x_pricing { border: dashed 1px pink; }
.x_pricing ._price { border: dashed 1px blue; }
.x_pricing ._compare { border: dashed 1px green; }
/*----------------------------------------------------------------------------*/


/* _related.css ----------------------------------------------------------------
// Copyright (c) 2018 maulomelin@gmail.com.  Released under the MIT license.
//----------------------------------------------------------------------------*/
/* Set up the overall container. */
._related { display: flex; overflow-x: auto; }
/* Remove the scrollbar. */
._related { -webkit-overflow-scrolling: touch; -ms-overflow-style: none; overflow: -moz-scrollbars-none; }
._related::-webkit-scrollbar { display: none; }
/* Set up the CSS Grid. */
._related ul { margin: 0; padding: 0; list-style: none; }
._related ul { display: grid; grid-auto-flow: column; grid-auto-columns: 100px; grid-template-rows: auto min-content; }
/* Remove some containers from the flow. */
._related ul li { display: contents; }
._related ul li figure { display: contents; }
/* Style the image and text elements. */
._related ul li figure a img { display: block; width: 100%; height: 100%; object-fit: contain; align-self: center; }
._related ul li figure figcaption { text-align: center; }
/* (Debug) -------------------------------------------------------------------*/
.x_related { border: dashed 1px pink; xpadding: 1rem; }
.x_related ul { border: dashed 1px lightgreen; padding: 1rem; background: lightyellow; }
.x_related ul li figure > * { border: dashed 1px lightblue; }
/*----------------------------------------------------------------------------*/
