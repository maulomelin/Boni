{%- comment -%}-----------------------------------------------------------------
Design Pattern:
  [_related]

Snippet:
  _related.Liquid

Usage:
  {%- include "_related", product: product, type: "othercolors", heading: "Colors" -%}

Parameters:
  {product object} product [ required ] // The product to draw data from.
  {string} type [ required ] // The type of related content to be rendered.
  {string} heading [ optional ] // The header string to use for the module.

Output:
  - An unordered list of <figures> that include an image and a caption.
    For an example, see the [_related] design pattern.
  - The specific images and caption are drawn from data fields associated
    with the given "type" parameter.  THe data itself is embedded within
    the given product.
  - If the heading is omitted in the request, it is omitted in the output.

Description:
  - The data comes from a string that is parsed within this routine.
      - For now, "related" data is imported into a product in a metafield.
      - There are a number of types supported by the system, with data
        contained in one or across a number of metafields.
  - The data is not filtered; if it contains the same item, it is shown.
  - The module is rendered if there is more than 1 related items (2+).
    This avoids simply listing the current item again.
    This, of course, assumes the data does not filter the outfit items.

TODOs:
  - Figure out if we want all "related" data into a single metafield, or to
    append individual "related" modules' data into separate metafields.
  - The related module has entries corresponding to aspects associated with the
    product.  It is assumed that one of those entries is the product itself,
    because it shares that attribute itself.  Review whether this is how we
    want the design, or whether the list of related items is exclusive of the
    product itself.
  - Snippet function to generate an image's responsive form.
  - ALT text is currently set to "TODO".
  - Check that the product handles are valid, like we do with breadcrumb
    collection handles.
--------------------------------------------------------------{%- endcomment -%}

{%- comment -%} StartMarker {%- endcomment %}
<!-- [_related] -->
{%- comment -%} /StartMarker {%- endcomment -%}

{%- include "function.related_product_handles", product: product, identifier: type -%}
{%- assign _handles = related_product_handles %}
<!-- Info: [{{- _handles.size -}}] product handles found. -->
{%- if _handles %}
<div class="_related">
  {%- if heading %}
  <div class="_heading">
    <h2>{{- heading -}}</h2>
  </div>
  {%- endif %}
  <div class="_items">
    <ul>
      {%- for _h in _handles -%}
        {%- assign _href = all_products[_h].url | within: collection -%}
        {%- assign _src = all_products[_h].featured_image | img_url: "medium" -%}
        {%- assign _alt = "TODO" -%}
        {%- include "function.product_attribute", product: all_products[_h], attribute: type -%}
        {%- if product_attribute -%}
          {%- assign _figcaption = product_attribute -%}
        {%- else -%}
          {%- assign _figcaption = all_products[_h].title -%}
        {%- endif %}
      <li>
        <figure>
          <a href="{{- _href -}}">
            <img src="{{- _src-}}" alt="{{- _alt -}}"/>
          </a>
          <figcaption>{{- _figcaption -}}</figcaption>
        </figure>
      </li>
      {%- endfor %}
    </ul>
  </div>
</div>
{%- endif -%}

{%- comment -%} Clean up local variables. {%- endcomment -%}
{%- assign _handles = nil -%}
{%- assign _h = nil -%}
{%- assign _href = nil -%}
{%- assign _src = nil -%}
{%- assign _alt = nil -%}
{%- assign _figcaption = nil -%}

{%- comment -%} EndMarker {%- endcomment %}
<!-- /[_related] -->
{% comment -%} /EndMarker {%- endcomment -%}
