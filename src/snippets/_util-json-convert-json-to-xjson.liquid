{%- comment -%}-----------------------------------------------------------------

Design Pattern:
  [_util-json-convert-json-to-xjson]

Snippet:
  _util-json-convert-json-to-xjson.Liquid

Usage:
  {% capture xjson %}
    {% render "_util-json-convert-json-to-xjson", json: json %}
  {% endcapture %}

Parameters:
  {string} json

Output:
  - A Liquid "split"table json string that can be processed in Liquid.

Description:
  - The conversion process is implemented by a finite state machine.
    The details of how it was designed is covered in the design document.
  - Functional equivalents from subroutines used in the spec to Liquid:
      - print(x) := {% echo x %}
      - append(x, c) := {% assign x = x | append: c %}
      - shift(x, n | n > 0) := {% assign x = x | append: "@^n" %}
      - shift(x, n | n < 0) := {% assign x = x | remove_first: "@^n" %}
      - push(stack, x) := {% assign stack = stack | prepend: x %}
      - pop(stack) := {% assign x = stack | slice: 1 %} {% assign stack = stack | slice: 1, stack.size %} {% echo x %}
      - str2num(x) := {% echo x | plus: 0 %}
      - set(x, max(x, length(y))) := {% assign x = y.size | at_least: x %}
          - length(x) := {% echo x.size %}
          - max(x, y) := {% echo y | at_least: x %}
          - set(x, y) := {% assign x = y %}
      - clear(x) := {% assign x = nil %}
  - The conversion routine is organized into the following two large steps:
      1) Iterate every character through a conversion FSM.
         This will generate a type-tagged string with "@"-delimiters.
      2) Generate a "@"-to-"#" delimiter-mapping pyramid to convert
         every "@"-delimiter into a "#"-delimiter.
          - The delimiter mapping table:
              - @^n -> #^(maxn - n + 1)
              - For example:
                  @@@@ -> #
                  @@@ -> ##
                  @@ -> ###
                  @ -> ####

TODOs:
  - TEST an example where we have alternating nestings of objects and arrays, to test the push/pop container stack.
  - TEST an example with an object nested inside an array, to test the lack of JSONArrayElement header.

--------------------------------------------------------------{%- endcomment -%}

{%- comment -%} Conversion FSM {%- endcomment -%}
{%- liquid
  assign arr_json = json | strip_newlines | split: ""

  assign container = nil
  assign containers = nil
  assign bliteral = false
  assign literal = nil
  assign bstring = false
  assign delim = nil
  assign n = 0

  capture xjson
    for char in arr_json
      case char

        when "{"

          if true == bstring
            echo char
          elsif true == bliteral
            assign literal = literal | append: char
          else
            assign delim = delim | append: "@"

            echo "JSONObject"
            echo "|"
            echo delim
            echo "||"
            assign n = delim.size | at_least: n

            assign containers = containers | prepend: container
            assign container = "obj"

            assign delim = delim | append: "@"

            echo "JSONObjectMember"
            echo "|"
            echo delim
            echo "||"
            assign n = delim.size | at_least: n
          endif


        when "}"

          if true == bstring
            echo char
          elsif true == bliteral
            if "true" == literal
              echo "JSONTrue"
            elsif "false" == literal
              echo "JSONFalse"
            elsif "null" == literal
              echo "JSONNull"
            else
              echo "JSONNumber"
              assign literal = literal | plus: 0
            endif
            echo "||"
            echo literal

            assign bliteral = false
            assign literal = nil

            assign delim = delim | remove_first: "@@"

            assign container = containers | slice: 0, 3
            assign containers = containers | slice: 3, containers.size
          else
            assign delim = delim | remove_first: "@@"

            assign container = containers | slice: 0, 3
            assign containers = containers | slice: 3, containers.size
          endif


        when "["

          if true == bstring
            echo char
          elsif true == bliteral
            assign literal = literal | append: char
          else
            assign delim = delim | append: "@"

            echo "JSONArray"
            echo "|"
            echo delim
            echo "||"
            assign n = delim.size | at_least: n

            assign containers = containers | prepend: container
            assign container = "arr"

            assign delim = delim | append: "@"
          endif


        when "]"
          if true == bstring
            echo char
          elsif true == bliteral
            if "true" == literal
              echo "JSONTrue"
            elsif "false" == literal
              echo "JSONFalse"
            elsif "null" == literal
              echo "JSONNull"
            else
              echo "JSONNumber"
              assign literal = literal | plus: 0
            endif
            echo "||"
            echo literal

            assign bliteral = false
            assign literal = nil

            assign delim = delim | remove_first: "@@"

            assign container = containers | slice: 0, 3
            assign containers = containers | slice: 3, containers.size
          else
            assign delim = delim | remove_first: "@@"

            assign container = containers | slice: 0, 3
            assign containers = containers | slice: 3, containers.size
          endif


        when ","
          if true == bstring
            echo char
          elsif true == bliteral
            if "true" == literal
              echo "JSONTrue"
            elsif "false" == literal
              echo "JSONFalse"
            elsif "null" == literal
              echo "JSONNull"
            else
              echo "JSONNumber"
              assign literal = literal | plus: 0
            endif
            echo "||"
            echo literal

            assign bliteral = false
            assign literal = nil

            assign delim = delim | remove_first: "@"
            echo delim
            assign delim = delim | append: "@"

            if "obj" == container
              echo "JSONObjectMember"
              echo "|"
              echo delim
              echo "||"
            endif
          else
            assign delim = delim | remove_first: "@"
            echo delim
            assign delim = delim | append: "@"

            if "obj" == container
              echo "JSONObjectMember"
              echo "|"
              echo delim
              echo "||"
            endif
          endif


        when '"'
          if true == bstring
            assign bstring = false
          elsif true == bliteral
            assign literal = literal | append: char
          else
            echo "JSONString"
            echo "||"
            assign bstring = true
          endif


        when ":"
          if true == bstring
            echo char
          elsif true == bliteral
            assign literal = literal | append: char
          else
            echo delim
          endif


        when " "
          if true == bstring
            echo char
          elsif true == bliteral
            assign literal = literal | append: char
          endif


        else
          if true == bstring
            echo char
          elsif true == bliteral
            assign literal = literal | append: char
          else
            assign bliteral = true
            assign literal = literal | append: char
          endif

      endcase

    endfor
  endcapture
-%}

{%- comment -%} Delimiter Mapping {%- endcomment -%}
{%- liquid
  assign search = "@"
  for i in (1..n)
    assign search = search | append: "@"
  endfor

  assign replace = nil
  for i in (1..n)
    assign search = search | remove_first: "@"
    assign replace = replace | append: "#"
    assign xjson = xjson | replace: search, replace
  endfor
-%}

{%- comment -%} Output {%- endcomment -%}
{{- xjson | strip -}}
