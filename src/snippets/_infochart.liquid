{%- comment -%}-----------------------------------------------------------------
Design Pattern:
  [_infochart]

Snippet:
  _infochart.Liquid

Usage:
  {%- for option in product.options_with_values -%}
    {%- include "_optiongroup", product: product, index: forloop.index0 -%}
    {%- include "_infochart", product: product, name: product.options_with_values[forloop.index0].name -%}
  {%- endfor -%}

  {%- include "_infochart", product: product, name: "Size" -%}

Parameters:
  {product object} product [ required ] // The product with the metafield data.
  {string} name [ required ] // The name of the metafield data to render.

Output:
  - An [_infochart] module.  See the design doc for more details.

Description:
  - Measurements data is contained in product.metafields.google.custom_label_0.
  - The metafield COULD be changed to capture data for different infocharts.
    The current implementation, however, only expects sizes.  See TODOs.
  - The infochart finds the data requested in the { name string } parameter
    in the { product object } requested.
  - To render the ._diagram section:
      - Iterate over all images to see if there are any diagrams that
        match the infochart's name.
          - If at least one matching image is found, iterate over all images
            again, build the ._diagram section as we go along.
          - If no matching image is found, do not render the ._diagram section.
      - This procedure requires two iterations over all images.
        It is not optimal, but the code is clearer and easier to maintain.
        With the small number of images per product, this is acceptable.

Notes:
  - We used to pass as arguments { { product object }, { integer index } }
    and would render an [_infochart] only when a metafield entry matched
    product.options_with_values[index].name.  The idea was that the match
    needed to happen since the infocharts were designed to provide additional
    information on an option.  However, since we can render an [_infochart]
    separate from an [_optiongroup], we want this module to render the
    infochart we request by name, and see if the given product object has it.
    Here are the corresponding notes on that old/earlier approach:
      - To guarantee that the option and infochart data come from the same
      product object, we pass as inputs {product object} and {position integer}.
      We pull the option name from product.options_with_values[position].name
      and compare that with the name from each infochart data set from
      product.metafields.google.custom_label_0.
        - Shopify won't let two options in the same product share the same name,
          which guarantess the option name will be unique.
        - If option.name == metafield's infochart name, then they're a match.
        - An earlier implemmentation passed as inputs:
            {product object} and {option object}
          But there was no guarantee the option wasn't from the product object,
          so the snippet was modified to pass an index value instead.

TODOs:
  - Support multiple infochart entries in the metafield.
      - Create subroutines for each named infochart to render the data.
      - Make this routine simply render the wrapper.
  - Update image check with latest image filename schema.
  - We removed [data-mls="TRUE"] from "._infochart", in case things break.
--------------------------------------------------------------{%- endcomment -%}

{%- comment -%} beginMarker {%- endcomment %}
<!-- [_infochart] -->
{%- comment -%} /beginMarker {%- endcomment -%}

{%- comment -%} Set up local variables. {%- endcomment -%}
{%- assign _productid = product.id -%}
{%- assign _name = name -%}
{%- assign _metafield = product.metafields.google.custom_label_0 -%}
{%- assign _metafield = _metafield | split: "----------" -%}
{%- assign _identifier = _metafield[0] -%}
{%- assign _data = _metafield[1] | split: "-----" -%}
{%- assign _measures = _data[0] | split: "---" -%}
{%- assign _sizes = _data[1] | split: "----" -%}
{%- assign _label = _measures[0] -%}
{%- assign _features = _measures[1] | split: "--" -%}

{%- if "Size" == _name and "measurements" == _identifier -%}
{%- comment -%} Render the infochart if the labels match. {%- endcomment %}
<div class="_infochart _js-infochart _hide" data-u-productid="{{- _productid -}}" data-u-name="{{- _name -}}">

  {%- comment -%} Render the ._table section. {%- endcomment %}
  <div class="_table">

    {%- comment -%} Render the features column. {%- endcomment %}
    <ul>
      <li>{{- _label -}}</li>
      {%- for _f in _features %}
      <li>{{- _f -}}</li>
      {%- endfor %}
    </ul>

    {%- comment -%} Render all size columns. {%- endcomment %}
    {%- for _s in _sizes -%}
      {%- assign _size = _s | split: "---" -%}
      {%- assign _label = _size[0] -%}
      {%- assign _lengths = _size[1] | split: "--" %}
    <ul class="_js-infochart-table-column" data-u-value="{{- _label -}}">
      <li>{{- _label -}}</li>
      {%- for _l in _lengths -%}
        {%- assign _n = _l | split: "-" -%}
        {%- if 1 == _n.size -%}     {%- capture _length -%} {{- _n[0] -}} {%- endcapture -%}
        {%- elsif 2 == _n.size -%}  {%- capture _length -%} &frac{{- _n[0] -}}{{- _n[1] -}}; {%- endcapture -%}
        {%- elsif 3 == _n.size -%}  {%- capture _length -%} {{- _n[0] -}}&frac{{- _n[1] -}}{{- _n[2] -}}; {%- endcapture -%}
        {%- else -%}                {%- capture _length -%} n/a {%- endcapture -%}
        {%- endif %}
      <li>{{- _length -}}</li>
      {%- endfor %}
    </ul>
    {%- endfor %}
  </div>

  {%- comment -%} Check if there are any diagram images for this option. {%- endcomment -%}
  {%- assign _bdiagram = false -%}
  {%- for _i in product.images -%}
    {%- include "function.image-filename-attribute", image: _i, attribute: "type" -%}
    {%- if "diagram" == image_filename_attribute -%}
      {%- include "function.image-filename-attribute", image: _i, attribute: "option-name" -%}
      {%- if _name == image_filename_attribute -%}
        {%- assign _bdiagram = true -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfor -%}
  {%- comment -%} Render the ._diagram section if there are any diagram images. {%- endcomment -%}
  {%- if true == _bdiagram %}
  <div class="_diagram">
    {%- for _i in product.images -%}
      {%- include "function.image-filename-attribute", image: _i, attribute: "type" -%}
      {%- if "diagram" == image_filename_attribute -%}
    <img src="{{ _i | img_url: "medium" }}" alt="TODO" />
      {%- endif -%}
    {%- endfor -%}
  </div>
  {%- endif %}
</div>
{%- endif -%}

{%- comment -%} Clean up local variables. {%- endcomment -%}
{%- assign _productid = nil -%}
{%- assign _name = nil -%}
{%- assign _metafield = nil -%}
{%- assign _identifier = nil -%}
{%- assign _data = nil -%}
{%- assign _measures = nil -%}
{%- assign _sizes = nil -%}
{%- assign _label = nil -%}
{%- assign _features = nil -%}
{%- assign _f = nil -%}
{%- assign _s = nil -%}
{%- assign _lengths = nil -%}
{%- assign _l = nil -%}
{%- assign _length = nil -%}
{%- assign _bdiagram = nil -%}
{%- assign _i = nil -%}

{%- comment -%} endMarker {%- endcomment %}
<!-- /[_infochart] -->
{% comment -%} /endMarker {%- endcomment -%}
