{%- comment -%}-----------------------------------------------------------------
Feature Pattern:
  IMAGE FILENAME NAMING

Description:
  - Function to retrieve attributes encoded in an image's filename.
  - Assumes that the image filename has the following format:

      filename -> <type>----------<data>.extension

      for <type> = "outfit", <data> = (<item>--<color>)(---<item>--<color>)*----<index>
      for <type> = "size", <data> = TODO TODO TODO

      <item> = single dash-delimited item name (e.g. "aliso" -> "aliso").
      <color> = single dash-delimited color name (e.g. "indigo-blue" -> "indigo blue").

      * single dash-delimited names allow us to expand it in the future to things
        like "aliso-leather-skirt" -> "aliso leather skirt".

  - With that format, the splitting process is as follows:
      - To get <type>:
          image.src           =>  [path/filename]
          split: "/"          =>  [path] [filename]
          split: "."          =>  [path] [<type>----------<data>] [extension]
          split: "----------" =>  [path] [<type>] [<data>] [extension]

      - Subsequent splitting of <data> is based on the <type>.
      - To get {item, color} pairs for type:outfit:

          <data>        =>  [(<item>--<color>)(---<item>--<color>)*----<index>]
          split: "----" =>  [(item1--color1)(---itemX--colorX)*] [index]
          split: "---"  =>  [item1--color1] ... [itemN--colorN] [index]
          split: "--"   =>  [item1] [color1] ... [itemN] [colorN] [index]

PARAMETERS:
  {image object} image[ required ] // The image to process.
  {string} attribute[ required ] // The attribute to query for.

OUTPUT:
  - Results of the query are in a variable named image_filename_attribute.
  - Variable is nil if no query attribute is provided.

SAMPLE:
  {% include "function.image-filename-attribute", image: image, attribute: primary-color %}
  <p>The primary color of this image is {{ image_filename_attribute }}</p>

TODOs:
  - Change delimiters to dashes, upload newly renamed filenes, and update product info via loaded file.
  - Support fetching arbitrary attributes from an image:
      - Change function name.
      - Change file name.
      - Add a second parameter for attribute to fetch.
      - Add a case statement for all supported attribute queries.
  - Check that last assignment to "nil" (can't do it), and clean things up.
DONE:
  -
--------------------------------------------------------------{%- endcomment -%}


{%- if "type" == attribute -%}

  {%- assign x = image.src | split: "/" -%}
  {%- assign x = x[1] | split: "----------" -%}
  {%- assign x = x[0] -%}
  {%- assign image_filename_attribute = x -%}

{%- elsif "option-name" == attribute -%}

  {%- assign x = image.src | split: "/" -%}
  {%- assign x = x[1] | split: "----------" -%}
  {%- assign x = x[1] | split: "-----" -%}
  {%- assign x = x[0] -%}
  {%- assign image_filename_attribute = x -%}

{%- elsif "primary-color" == attribute -%}

  {%- assign x = image.src | downcase -%}
  {%- assign x = x | split: "/" -%}
  {%- assign x = x[1] | split: "." -%}
  {%- assign x = x[0] | split: "--" -%}
  {%- assign x = x[0] | split: "-" -%}
  {%- assign x = x[0] | split: "_" -%}
  {%- assign x = x[1] -%}

  {%- assign image_filename_attribute = x -%}

{%- elsif "foobar" == attribute -%}

  {%- assign x = image.src | downcase -%}
  {%- assign x = x | split: "/" | join: "#" -%}
  {%- assign x = x | split: "." | join: "#" -%}
  {%- assign x = x | split: "--" | join: "#" -%}
  {%- assign x = x | split: "-" | join: "#" -%}
  {%- assign x = x | split: "_" | join: "#" -%}

  {%- assign image_filename_attribute = x -%}

{%- else -%}

  {%- assign image_filename_attribute = nil -%}

{%- endif -%}

{%- comment -%} Clean up local variables. {%- endcomment -%}
{%- assign x = "" -%}
