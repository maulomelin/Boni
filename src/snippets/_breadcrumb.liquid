{%- comment -%}-----------------------------------------------------------------
Design Pattern:
  [_breadcrumb]

Snippet:
  _breadcrumb.Liquid

Usage:
  {%- include "_breadcrumb", tree: linklists.main-menu, class: "_text-small" -%}

Parameters:
  {linklist object} tree [ required on a collection page, ignored on a product page ] // A linklist with links to render.
  {string} class [ optional ] // An optional string to add to the module's class attribute.
  {boolean} recursion [ = false ] // Internal flag for rendering open/close tags.

Output:
  - The outermost wrapper is <div class="_breadcrumb">...</div>
  - The main content is an unordered list (i.e. <ul>).
  - The list contents depends on the template the snippet is on:
      - On a collection page, renders the collection-based breadcrumb.
      - On a product page, renders the product-based breadcrumb.
  - The collection-based breadcrumb shows the list of links from the tree
    that are active.  This is basically a path from the root node to the
    current page (which is active).  The tree is traversed recursively.
  - The product-based breadcrumb looks at a product metafield for an ordered
    list of collection names that make up the ideal breadcrumb for that product.
    This form ignores the tree and recursion parameters.

Description:
  - The output list is flat; it is not a nested list of links.
  - The snippet basically renders the first path of active links in a tree.
  - A collection-based breadcrumb renders a list of links by recursively
    calling itself on nested items in the linklist tree parameter.  Rendered
    items correspond to tree links that are active or have active children.
  - A product-based breadcrumb renders a list of links by iterating over an
    array of collection handles.
      - See the snippet below for more details on the collection handles array.
      - Each collection handle should correspond to a collection in the system,
        else the item is not rendered.  This avoids having blank elements.
          - Check for valid collections by comparing it to "empty"
            https://help.shopify.com/en/themes/liquid/basics/types#empty-drop
          - Invalid collections generate an info debug message.
  - To render the product-based breadcrumb:
      - Iterate over all collection handles to see if there are any valid ones.
          - If there is at least one valid one, iterate over all handles
            again, build the breadcrumb as we go along.
          - If no matching handles are found, do not render the breadcrumb.
      - This procedure requires two iterations over all collection handles.
        It is not optimal, but the code is clearer and easier to maintain.
        With the small number of handles per product, this is acceptable.

TODOs:
  - Do we need to make a distinction between link.active and link.child_active?
  - Look at how it's being used and think about making it more interactive,
    such as giving each menu a drop-down for other siblings, like FileExplorer.
  - Figure out how to make the UI wrap when it gets too long (all via CSS).
  - Finalize naming convention for collections created in the Shopify Admin UI.
    Remember that these names will appear in the URL.  Collections are not
    nested; the linklist does that, but all collections are named at the same
    level in the URL.
--------------------------------------------------------------{%- endcomment -%}

{%- comment -%} StartMarker {%- endcomment %}
<!-- [_breadcrumb] -->
{%- comment -%} /StartMarker {%- endcomment -%}

{%- if "collection" == template.name -%}

  {%- comment -%} Render the collection-aware breadcrumb. {%- endcomment -%}
  {%- if tree.links != blank -%}
    {%- unless _recursion %}
<div class="_breadcrumb {{ class }}">
  <ul>
    {%- endunless -%}
    {%- for link in tree.links -%}
      {%- if link.active %}
    <li><a href="{{ link.url }}">{{ link.title }}</a></li>
        {%- break -%}
      {%- endif -%}
      {%- if link.child_active %}
    <li><a href="{{ link.url }}">{{ link.title }}</a></li>
        {%- include "_breadcrumb", tree: link, _recursion: true -%}
        {%- break -%}
      {%- endif -%}
    {%- endfor -%}
    {%- unless _recursion %}
  </ul>
</div>
    {% endunless -%}
  {%- endif -%}

{%- elsif "product" == template.name -%}

  {%- comment -%} Render the product-based breadcrumb. {%- endcomment -%}
  {%- include "function.breadcrumb_collection_handles", product: product -%}
  {%- assign _handles = breadcrumb_collection_handles %}
<!-- Info: [{{- _handles.size -}}] breadcrumb collection handles. -->

  {%- comment -%} Check if there are any valid collections. {%- endcomment -%}
  {%- assign _bflag = false -%}
  {%- assign _n = 0 -%}
  {%- for _h in _handles -%}
    {%- if empty != collections[_h] -%}
      {%- assign _bflag = true -%}
      {%- assign _n = _n | plus: 1 %}
  <!-- Info: valid collection[{{- _h -}}] -->
    {%- else %}
  <!-- Info: /valid collection[{{- _h -}}] -->
    {%- endif -%}
  {%- endfor %}
<!-- Info: [{{- _n -}}] valid collection handles. -->
<!-- Info: [{{- _handles.size | minus: _n -}}] /valid collection handles. -->
  {%- comment -%} Render the breadcrumb if there are any valid collections. {%- endcomment -%}
  {%- if true == _bflag %}
<div class="_breadcrumb {{ class }}">
  <ul>
    {%- for _h in _handles -%}
      {%- if empty != collections[_h] -%}
        {%- assign _href = collections[_h].url -%}
        {%- assign _title = collections[_h].title %}
    <li><a href="{{- _href -}}">{{- _title -}}</a></li>
      {%- endif -%}
    {%- endfor %}
  </ul>
</div>
  {%- endif -%}

{%- else %}
<!-- Error: Unknown template [{{- template.name -}}] -->
{%- endif -%}

{%- comment -%} EndMarker {%- endcomment %}
<!-- /[_breadcrumb] -->
{% comment -%} /EndMarker {%- endcomment -%}
